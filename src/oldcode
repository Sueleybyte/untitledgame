        addEffect(() => {
          const { rocks, enemies } = get()

          const time = Date.now()

          // test for hits
          const r = rocks.filter(actions.test)
          //const e = enemies.filter(actions.test)
          //const a = r.concat(e)
          const a = r
          const previous = mutation.hits
          mutation.hits = a.length
          if (previous === 0 && mutation.hits) playAudio(audio.click)
          const lasers = get().lasers
          if (mutation.hits && lasers.length && time - lasers[lasers.length - 1] < 100) {
            const updates = a.map(data => ({ time: Date.now(), ...data }))
            set(state => ({ explosions: [...state.explosions, ...updates] }))
            clearTimeout(cancelExplosionTO)
            cancelExplosionTO = setTimeout(
              () =>
                set(state => ({
                  explosions: state.explosions.filter(({ time }) => Date.now() - time <= 1000)
                })),
              1000
            )
            set(state => ({
              //points: state.points + r.length * 100 + e.length * 200,
              rocks: state.rocks.filter(rock => !r.find(r => r.guid === rock.guid))
              //enemies: state.enemies.filter(enemy => !e.find(e => e.guid === enemy.guid))
            }))
          }
          // if (a.some(data => data.distance < 15)) set(state => ({ health: state.health - 1 }))
        })
        ,
      test(data) {
        box.min.copy(data.offset)
        box.max.copy(data.offset)
        box.expandByScalar(data.size * data.scale)
        data.hit.set(10000, 10000, 10000)
        const result = get().mutation.ray.intersectBox(box, data.hit)
        data.distance = get().mutation.ray.origin.distanceTo(data.hit)
        return result
      }

      function randomData(count, track, radius, size, scale) {
  return new Array(count).fill().map(() => {
    const t = Math.random()
    const pos = track.parameters.path.getPointAt(t)
    pos.multiplyScalar(15)
    const offset = pos.clone().add(new THREE.Vector3(-radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2))
    const speed = 0.1 + Math.random()
    return {
      guid: guid++,
      scale: typeof scale === 'function' ? scale() : scale,
      size,
      offset,
      pos,
      speed,
      radius,
      t,
      hit: new THREE.Vector3(),
      distance: 1000
    }
  })

}
      rocks: randomData(120, track, 150, 8, () => 1 + Math.random() * 2.5),
      particles: randomData(3000, track, 100, 1, () => 0.5 + Math.random() * 0.5),